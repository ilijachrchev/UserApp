@using UserApp.ViewModels;
@model LoginViewModel;

@{
	ViewData["Title"] = "Login";
	Layout = "~/Views/Shared/_AccountLayout.cshtml";
}

<div class="account-container">
	<div class="account-box">
		<h2 class="text-center mb-4">Login</h2>
		<form asp-action="Login" method="post">
			<div asp-validation-summary="ModelOnly" class="text-danger"></div>
			<div class="mb-3">
				<label asp-for="UserNameOrEmail" class="form-label"></label>
				<input asp-for="UserNameOrEmail" class="form-control" />
				<span asp-validation-for="UserNameOrEmail" class="text-danger"></span>
			</div>
			<div class="mb-3">
				<label asp-for="Password" class="form-label"></label>

				<div class="input-group">
					<input asp-for="Password" class="form-control" id="passwordInput" />
					<button class="btn btn-outline-secondary" type="button"
							onmousedown="showPassword('passwordInput')"
							onmouseup="hidePassword('passwordInput', this)"
							onmouseleave="hidePassword('passwordInput', this)"
							data-bs-toggle="tooltip" data-bs-placement="left" title="Hold to reveal password">
						👁️
					</button>

				</div>

				<span asp-validation-for="Password" class="text-danger"></span>
			</div>

			<div class="float-end">
				<a asp-controller="Account" asp-action="VerifyEmail" class="text-decoration-none">
					Forgot password?
				</a>
			</div>
			<div class="form-check mb-3">
				<label class="form-check-label">
					<input asp-for="RememberMe" class="form-check-input" />
					@Html.DisplayNameFor(a=> a.RememberMe)
				</label>
			</div>
			<input type="submit" value="Login" class="btn btn-success w-100 p-2" />
			<p class="text-center mt-2">
				Don't have an account? <a asp-controller="Account" asp-action="Register" class="text-decoration-none">Register</a>
			</p>
			<div class="text-center">
				<a asp-controller="Home" asp-action="Index" class="text-decoration-none mt-3">Back</a>
			</div>
		</form>
	</div>
</div>

@section Scripts{
	@{
		await Html.RenderPartialAsync("_ValidationScriptsPartial.cshtml");
	}
}

<script>
	function showPassword(id) {
	  document.getElementById(id).type = 'text';
	}

	function hidePassword(id, btn) {
	  document.getElementById(id).type = 'password';
	  bootstrap.Tooltip.getInstance(btn)?.hide(); // Hide tooltip manually
	}

	document.addEventListener('DOMContentLoaded', function () {
	  const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
	  tooltipTriggerList.forEach(function (el) {
		new bootstrap.Tooltip(el, {
		  delay: { show: 0, hide: 0 },
		  trigger: 'hover'
		});
	  });
	});
</script>


<style>
	.tooltip-inner {
		background-color: #343a40; /* Dark gray */
		color: #fff;
		padding: 8px 12px;
		font-size: 0.9rem;
		border-radius: 6px;
		box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);
	}

	.tooltip.bs-tooltip-top .tooltip-arrow::before {
		border-top-color: #343a40;
	}

	.tooltip.bs-tooltip-left .tooltip-arrow::before {
		border-left-color: #343a40;
	}

	.tooltip.bs-tooltip-right .tooltip-arrow::before {
		border-right-color: #343a40;
	}

	.tooltip.bs-tooltip-bottom .tooltip-arrow::before {
		border-bottom-color: #343a40;
	}
</style>

